variables:
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository


default:
  image: docker:latest
  tags:
    - development

stages:
  - smells
  - issues
  - build
  - test
  - package
  - docker
  - deploy

services:
  - mysql:latest
  - docker:dind

cache:
  paths:
    - .m2/repository
    - target

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:latest

smells_job:
  stage: smells
  image: openjdk:17
  script:
    - echo "Start smells job"
    - mkdir smells/
    - java -jar $CI_PROJECT_DIR/.gitlab/DesigniteJava.jar -i $CI_PROJECT_DIR -o smells/ -d
  #    - cd smells/
  #    - ls -a
  artifacts:
    paths:
      - smells/
      - $CI_PROJECT_DIR
  only:
    - main

issues_job:
  stage: issues
  dependencies:
    - smells_job
  image: python:3.10
  script:
    - pip install -r $CI_PROJECT_DIR/.gitlab/requirements.txt
    - python $CI_PROJECT_DIR/.gitlab/Issues.py $CI_COMMIT_SHA
  only:
    - main


build_job:
  stage: build
  image: maven:3.8.7
  script:
    - echo "Maven build started"
    - mvn compile
  only:
    - main


test_job:
  stage: test
  image: maven:3.8.7
  artifacts:
    when: always
    reports:
      junit:
        - -target/Reports/Test_*.xml
  script:
    - echo "Maven testing started"
    - mvn test
  only:
    - main

package_job:
  stage: package
  image: maven:3.8.7
  script:
    - echo "Maven build started"
    - mvn clean package
  artifacts:
    paths:
      - target/*.jar
  only:
    - main

build_job_docker:
  stage: docker
  script:
    - docker login -u ${CI_REGISTRY_USERNAME} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    - docker logout
  only:
    - main


deploy_job:
  stage: deploy
  script:
    - echo "Maven deploy started"
    - echo "${DEPLOY_SSH_KEY}"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${DEPLOY_SSH_KEY}" | base64 -d)
    - ssh-add -l
    - scp -r -o StrictHostKeyChecking=no target/*.jar "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/project.jar"
    - ssh -o StrictHostKeyChecking=no  csci5308vm8@csci5308vm8.research.cs.dal.ca /home/csci5308vm8/project/stop_container.sh
    - ssh -o StrictHostKeyChecking=no  csci5308vm8@csci5308vm8.research.cs.dal.ca docker pull $CONTAINER_TEST_IMAGE
    - ssh -o StrictHostKeyChecking=no  csci5308vm8@csci5308vm8.research.cs.dal.ca docker run -d -p $EXPOSED_PORT:8080 --name project_app --rm $CONTAINER_TEST_IMAGE_VERSION
  only:
    - main